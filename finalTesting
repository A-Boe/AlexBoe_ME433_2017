public void onSurfaceTextureUpdated(SurfaceTexture surface) {
        // every time there is a new Camera preview frame
        mTextureView.getBitmap(bmp);
        SeekBar seek1 = (SeekBar) findViewById(R.id.seek1);

        // min RGB [138, 135, 86]
        // max RGB [231, 232, 233]
        // give constant upper bound tolerance, slider bar lower bound

        int com_x = 0;
        int com_y = 0;
        long com_sum = 0;
        long num_com = 0;
        int sum_y = 0;
        final Canvas c = mSurfaceHolder.lockCanvas();
        if (c != null) {
            int thresh = seek1.getProgress(); // comparison value
            int[] pixels = new int[bmp.getWidth()]; // pixels[] is the RGBA data
            //int startY = 200; // which row in the bitmap to analyze to read
            for (int j = 0; j < bmp.getHeight(); j += 5) {
                bmp.getPixels(pixels, 0, bmp.getWidth(), 0, j, bmp.getWidth(), 1);

                int sum_x = 0;
                int num_pixels = 0;
                // in the row, see if there is more green than red
                for (int i = 0; i < bmp.getWidth(); i+=1) {
                    /*if (((red(pixels[i]) - green(pixels[i])) < thresh) && ((green(pixels[i]) - blue(pixels[i])) < thresh)
                            && ((red(pixels[i]) - green(pixels[i])) > -thresh) && ((green(pixels[i]) - blue(pixels[i])) > -thresh)
                            && ((blue(pixels[i]) - red(pixels[i])) > -thresh) && ((blue(pixels[i]) - red(pixels[i])) < thresh)) {*/
                    /*if ( (red(pixels[i]) > 138 + thresh) && (green(pixels[i]) > 135 + thresh) && (blue(pixels[i]) > 86+thresh)
                            && (red(pixels[i]) < 231+thresh) && (green(pixels[i]) < 232+thresh) && (blue(pixels[i]) < 233+thresh)
                            && (red(pixels[i]) + green(pixels[i]) + blue(pixels[i]) < 730 ) ) {*/
                    if ( red(pixels[i]) - green(pixels[i]) > thresh ) {
                        pixels[i] = rgb(255, 0, 0); // over write the pixel with pure green
                        sum_x += i;
                        ++num_pixels;
                    }
                }
                // update center of mass
                if (num_pixels == 0) {
                    continue;
                }
                com_sum += sum_x / num_pixels;
                ++num_com;
                sum_y += j;

                //com_x = sum_x/num_pixels;
                //canvas.drawCircle(com_x, j, 5, paint1); // x position, y position, diameter, color
                //pixels[com] = rgb(255,0,0);
                // update the row
                bmp.setPixels(pixels, 0, bmp.getWidth(), 0, j, bmp.getWidth(), 1);
            }
            if (num_com == 0) {
                com_x = bmp.getWidth()/2;
                com_y = bmp.getHeight()/2;
            }
            else {
                com_x = (int) (com_sum / num_com);
                com_y = (int) (sum_y / num_com);
                canvas.drawCircle(com_x, com_y, 5, paint1);
            }

        }

        double x_weight = 2;
        double y_weight = 0.01;
        int motor_offset = (int) (x_weight*(com_x-bmp.getWidth()/2) * y_weight*com_y );
        int neutral_power = 3000;  // pwm are 0 to 8000
        int pwm1 = neutral_power + motor_offset;
        int pwm2 = neutral_power - motor_offset;
        
        // write the pos as text
        //canvas.drawText("pos = " + pos, 10, 200, paint1);
        c.drawBitmap(bmp, 0, 0, null);
        mSurfaceHolder.unlockCanvasAndPost(c);

        // draw dot on map
        /*Bitmap tempBitmap = Bitmap.createBitmap(map_bmp.getWidth(), map_bmp.getHeight(), Bitmap.Config.RGB_565);
        Canvas tempCanvas = new Canvas(tempBitmap);
        tempCanvas.drawBitmap(map_bmp, 0, 0, null);
        tempCanvas.drawCircle(com_x, 300, 5, paint1);
        imageView.setImageDrawable(new BitmapDrawable(getResources(), tempBitmap));*/

        // calculate the FPS to see how fast the code is running
        long nowtime = System.currentTimeMillis();
        long diff = nowtime - prevtime;
        mTextView4.setText("FPS " + 1000 / diff);
        prevtime = nowtime;

        String sendString =  String.valueOf(pwm1) + ' ' + String.valueOf(pwm2) + '\n';
        try {
            sPort.write(sendString.getBytes(), 100); // 10 is the timeout
        } catch (IOException e) {
        }

    }

}